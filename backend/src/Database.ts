//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { UsersEntity } from './db/Users.entity';
import { TasksEntity } from './db/Tasks.entity';
import { SpinWheelRewardsEntity } from './db/SpinWheelRewards.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      TasksEntity,
      SpinWheelRewardsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        { username: 'username 1', email: 'email 1', pointsBalance: 1, id: 4 },
        { username: 'username 2', email: 'email 2', pointsBalance: 2, id: 65 },
        { username: 'username 3', email: 'email 3', pointsBalance: 3, id: 82 },
        { username: 'username 4', email: 'email 4', pointsBalance: 4, id: 90 },
        { username: 'username 5', email: 'email 5', pointsBalance: 5, id: 84 },
      ],
      Tasks: [
        {
          title: 'title 1',
          description: 'description 1',
          pointsReward: 1,
          id: 51,
        },
        {
          title: 'title 2',
          description: 'description 2',
          pointsReward: 2,
          id: 7,
        },
        {
          title: 'title 3',
          description: 'description 3',
          pointsReward: 3,
          id: 76,
        },
        {
          title: 'title 4',
          description: 'description 4',
          pointsReward: 4,
          id: 68,
        },
        {
          title: 'title 5',
          description: 'description 5',
          pointsReward: 5,
          id: 95,
        },
      ],
      SpinWheelRewards: [
        { rewardName: 'rewardName 1', pointsValue: 1, id: 9 },
        { rewardName: 'rewardName 2', pointsValue: 2, id: 46 },
        { rewardName: 'rewardName 3', pointsValue: 3, id: 59 },
        { rewardName: 'rewardName 4', pointsValue: 4, id: 34 },
        { rewardName: 'rewardName 5', pointsValue: 5, id: 42 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('TasksEntity', data.Tasks);
      await this.SeedResource('SpinWheelRewardsEntity', data.SpinWheelRewards);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
